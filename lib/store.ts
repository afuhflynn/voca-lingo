"use client"

import { create } from "zustand"
import { v4 as uuidv4 } from "uuid"

export interface Transcription {
  id: string
  title: string
  text: string
  audioUrl: string
  date: string
  duration: number
}

interface RecordingState {
  isRecording: boolean
  isTranscribing: boolean
  transcriptions: Transcription[]
  startRecording: () => void
  stopRecording: () => void
  transcribeAudio: () => void
  removeTranscription: (id: string) => void
}

// Mock data for demonstration
const mockTranscriptions: Transcription[] = [
  {
    id: "1",
    title: "Meeting Notes",
    text: "We need to focus on improving the user onboarding experience. The current flow is confusing for new users. Let's schedule a design review for next week to address these issues.",
    audioUrl: "/audio/sample1.mp3",
    date: "2023-04-15T10:30:00",
    duration: 45,
  },
  {
    id: "2",
    title: "Project Ideas",
    text: "Create a mobile app that helps people track their daily water intake. It should send reminders and visualize progress towards daily goals. Could integrate with health apps for a more comprehensive health tracking experience.",
    audioUrl: "/audio/sample2.mp3",
    date: "2023-04-14T15:20:00",
    duration: 62,
  },
  {
    id: "3",
    title: "Shopping List",
    text: "Need to buy: milk, eggs, bread, apples, chicken, pasta, and tomato sauce. Also check if we need more coffee and toilet paper.",
    audioUrl: "/audio/sample3.mp3",
    date: "2023-04-13T09:15:00",
    duration: 28,
  },
]

export const useRecordingStore = create<RecordingState>((set) => ({
  isRecording: false,
  isTranscribing: false,
  transcriptions: mockTranscriptions,

  startRecording: () => set({ isRecording: true }),

  stopRecording: () => set({ isRecording: false }),

  transcribeAudio: () => {
    set({ isTranscribing: true })

    // Simulate API call for transcription
    setTimeout(() => {
      set((state) => {
        const newTranscription: Transcription = {
          id: uuidv4(),
          title: `Voice Memo ${state.transcriptions.length + 1}`,
          text: "This is a simulated transcription of your voice memo. In a real application, this would be the text generated by a speech-to-text API based on your recording.",
          audioUrl: "/audio/sample.mp3",
          date: new Date().toISOString(),
          duration: Math.floor(Math.random() * 60) + 30,
        }

        return {
          isTranscribing: false,
          transcriptions: [newTranscription, ...state.transcriptions],
        }
      })
    }, 2000)
  },

  removeTranscription: (id) => {
    set((state) => ({
      transcriptions: state.transcriptions.filter((t) => t.id !== id),
    }))
  },
}))

