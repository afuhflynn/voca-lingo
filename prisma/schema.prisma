generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id
  name              String
  email             String
  emailVerified     Boolean
  image             String?
  preferredLanguage String?           @default("english")
  xpPoints          Int               @default(0)
  learningLevel     String?           @default("beginner") // beginner, intermediate, advanced
  streak            Int               @default(0)
  lastActiveDate    DateTime?
  bio               String?
  progress          UserProgress[]
  voicePractices    VoicePractice[]
  vocabularyLists   VocabularyList[]
  achievements      UserAchievement[]

  createdAt DateTime
  updatedAt DateTime
  sessions  Session[]
  accounts  Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  refresh_token String? @map("refresh_token")
  access_token  String? @map("access_token")
  expires_at    Int?    @map("expires_at")
  token_type    String? @map("token_type")
  id_token      String? @map("id_token")
  session_state String? @map("session_state")

  createdAt DateTime
  updatedAt DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Language {
  id       String  @id
  name     String  @unique
  code     String  @unique // ISO code (e.g., en, es, fr)
  isActive Boolean @default(true)

  // Relations
  vocabularies Vocabulary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("languages")
}

model Vocabulary {
  id           String  @id
  word         String
  translation  String
  partOfSpeech String?
  example      String?
  audioUrl     String?
  difficulty   String  @default("beginner") // beginner, intermediate, advanced

  // Relations
  languageId String
  language   Language             @relation(fields: [languageId], references: [id], onDelete: Cascade)
  lists      VocabularyListItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vocabularies")
}

model VocabularyList {
  id          String  @id
  name        String
  description String?
  isPublic    Boolean @default(false)
  category    String? // e.g., travel, food, business

  // Relations
  userId String
  user   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  VocabularyListItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vocabulary_lists")
}

model VocabularyListItem {
  id            String    @id
  learned       Boolean   @default(false)
  lastPracticed DateTime?
  timesReviewed Int       @default(0)

  // Relations
  vocabularyId String
  vocabulary   Vocabulary     @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)
  listId       String
  list         VocabularyList @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vocabulary_list_items")
}

model VoicePractice {
  id                 String  @id
  audioUrl           String?
  transcription      String?
  aiFeedback         String?
  pronunciationScore Float?
  type               String // vocabulary, sentence, conversation

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("voice_practices")
}

model UserProgress {
  id                String @id
  language          String
  vocabularyLearned Int    @default(0)
  lessonCompleted   Int    @default(0)
  currentLevel      String @default("beginner")

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_progress")
}

model Achievement {
  id          String  @id
  name        String  @unique
  description String
  xpReward    Int     @default(10)
  badgeUrl    String?

  // Relations
  users UserAchievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("achievements")
}

model UserAchievement {
  id         String   @id
  achievedAt DateTime @default(now())

  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}
